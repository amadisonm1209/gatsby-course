{"version":3,"sources":["webpack:///./src/styles/Grids.js","webpack:///./src/components/LoadingGrid.js","webpack:///./src/components/ItemGrid.js","webpack:///./src/utils/useLatestData.js","webpack:///./src/pages/index.js"],"names":["HomePageGrid","styled","div","ItemsGrid","ItemStyles","LoadingGrid","count","Array","from","length","_","i","className","src","alt","width","height","ItemGrid","items","map","item","name","image","asset","url","style","background","metadata","lqip","backgroundSize","gql","String","raw","deets","CurrentlySlicing","slicemasters","HotSlices","hotSlices","HomePage","useState","setHotSlices","setSlicemasters","useEffect","fetch","process","method","headers","body","JSON","stringify","query","then","res","json","data","StoreSettings","slicemaster","catch","err","console","log","useLatestData"],"mappings":"+KAEaA,EAAeC,IAAOC,IAAV,0EAAGD,CAAH,6EAMZE,EAAYF,IAAOC,IAAV,uEAAGD,CAAH,0DAMTG,EAAaH,IAAOC,IAAV,wEAAGD,CAAH,idCXR,SAASI,EAAT,GAAiC,IAAVC,EAAS,EAATA,MAClC,OACI,kBAACH,EAAD,KACKI,MAAMC,KAAK,CAAEC,OAAQH,IAAS,SAACI,EAAGC,GAAJ,OAC3B,kBAACP,EAAD,KACI,2BACI,0BAAMQ,UAAU,QAAhB,eAEJ,yBACAC,IAAI,0HACJD,UAAU,UACVE,IAAI,GACJC,MAAM,MACNC,OAAO,aCbZ,SAASC,EAAT,GAA8B,IAAVC,EAAS,EAATA,MAC/B,OACI,kBAACf,EAAD,KACKe,EAAMC,KAAI,SAACC,GAAD,OACP,kBAAChB,EAAD,KACI,2BACI,0BAAMQ,UAAU,QAAQQ,EAAKC,OAEjC,yBACAN,MAAM,MACNC,OAAO,MACPH,IAAQO,EAAKE,MAAMC,MAAMC,IAAtB,wBACHV,IAAKM,EAAKC,KACVI,MAAO,CACHC,WAAW,OAAQN,EAAKE,MAAMC,MAAMI,SAASC,KAAnC,IACVC,eAAgB,gB,8aChBxC,IAAMC,EAAMC,OAAOC,IAEbC,EAAK,yICEX,SAASC,EAAT,GAA4C,IAAhBC,EAAe,EAAfA,aACxB,OACI,6BACI,wBAAIvB,UAAU,UACV,0BAAMA,UAAU,aAAhB,oBAEJ,iEACEuB,GAAgB,kBAAC9B,EAAD,CAAaC,MAAO,IACrC6B,KAAiBA,aAAD,EAACA,EAAc1B,SAAW,4DAC1C0B,aAAA,EAAAA,EAAc1B,SAAU,kBAACQ,EAAD,CAAUC,MAAOiB,KAItD,SAASC,EAAT,GAAkC,IAAbC,EAAY,EAAZA,UACjB,OACI,6BACI,wBAAIzB,UAAU,UACV,0BAAMA,UAAU,aAAhB,eAEJ,+DACEyB,GAAa,kBAAChC,EAAD,CAAaC,MAAO,IAClC+B,KAAcA,aAAD,EAACA,EAAW5B,SAAW,qDACpC4B,aAAA,EAAAA,EAAW5B,SAAU,kBAACQ,EAAD,CAAUC,MAAOmB,KAKpC,SAASC,IAAY,IAAD,EDhBpB,WAAyB,MAEFC,qBAA3BF,EAF6B,KAElBG,EAFkB,OAIID,qBAAjCJ,EAJ6B,KAIfM,EAJe,KAqCpC,OA/BAC,qBAAU,WAENC,MAAMC,+DAAqC,CACvCC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBC,MAAOpB,EAAF,IAKIG,EAGAA,OAMdkB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAC,GAG5BZ,EAAaY,EAAIE,KAAKC,cAAclB,WACpCI,EAAgBW,EAAIE,KAAKC,cAAcC,gBACxCC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,QAEjB,IACI,CACHrB,YAAWF,gBCrBmB0B,GAA3B1B,EADwB,EACxBA,aAAcE,EADU,EACVA,UACrB,OACG,yBAAKzB,UAAU,UACX,uDACA,iEACA,kBAACZ,EAAD,KACI,kBAACkC,EAAD,CAAkBC,aAAcA,IAChC,kBAACC,EAAD,CAAWC,UAAWA","file":"component---src-pages-index-js-9ff2cbc66e941d46e866.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const HomePageGrid = styled.div`\n    display: grid;\n    gap: 2rem;\n    grid-template-columns: repeat(2, minmax(auto, 1fr));\n`;\n\nexport const ItemsGrid = styled.div`\n    display: grid;\n    gap: 2rem;\n    grid-template-columns: 1fr 1fr;\n`;\n\nexport const ItemStyles = styled.div`\n    text-align: center;\n    position: relative;\n    img {\n        height: auto;\n        font-size: 0;\n    }\n    p {\n        transform: rotate(-2deg) translateY(-140%);\n        position: absolute;\n        width: 100%;\n        left: 0;\n    }\n    .mark {\n        display: inline;\n    }\n    @keyframes shine {\n        from {\n            background-position: 200%;\n        }\n        to {\n            background-position: -40px;\n        }\n    }\n    img.loading {\n        --shine: white;\n        --background: var(--grey);\n        background-image: linear-gradient(90deg, var(--background) 0px, var(--shine) 40px, var(--background) 80px);\n        background-size: 500px;\n        animation: shine 1s infinite linear;\n    }\n`;","import React from 'react';\nimport { ItemsGrid, ItemStyles } from \"../styles/Grids\";\n\nexport default function LoadingGrid({ count }) {\n    return (\n        <ItemsGrid>\n            {Array.from({ length: count }, (_, i) => (\n                <ItemStyles>\n                    <p>\n                        <span className=\"mark\">Loading...</span>\n                    </p>\n                    <img \n                    src=\"data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAAUAAAAECAQAAADsOj3LAAAADklEQVR42mNkgANGQkwAAJoABWH6GPAAAAAASUVORK5CYII=\"\n                    className=\"loading\" \n                    alt=\"\" \n                    width=\"500\" \n                    height=\"400\" />\n                </ItemStyles>\n            ))}\n        </ItemsGrid>\n    )\n}","import React from 'react';\nimport { ItemsGrid, ItemStyles } from '../styles/Grids';\n\nexport default function ItemGrid({ items }) {\n    return (\n        <ItemsGrid>\n            {items.map((item) => (\n                <ItemStyles>\n                    <p>\n                        <span className=\"mark\">{item.name}</span>\n                    </p>\n                    <img \n                    width=\"500\"\n                    height=\"400\"\n                    src={`${item.image.asset.url}?w=500&h=400&fit=crop`} \n                    alt={item.name}\n                    style={{\n                        background: `url(${item.image.asset.metadata.lqip})`,\n                        backgroundSize: 'cover'\n                    }}\n                    />\n                </ItemStyles>\n            ))}\n        </ItemsGrid>\n    )\n}","import { useEffect, useState } from 'react';\n\nconst gql = String.raw;\n\nconst deets = `  \n    name\n    _id\n    image {\n     asset {\n        url\n        metadata {\n            lqip\n            }\n        }\n    }\n`\n\nexport default function useLatestData() {\n    //hotslices\n    const [hotSlices, setHotSlices] = useState();\n    //slicemasters\n    const [slicemasters, setSlicemasters] = useState();\n    //use a side effect to fetch the data from the graphql endpoint\n    useEffect(function () {\n        //when the component loads, fetch the data\n        fetch(process.env.GATSBY_GRAPHQL_ENDPOINT, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                query: gql`\n                query { \n                    StoreSettings(id: \"downtown\") {\n                      name\n                      slicemaster {\n                       ${deets}\n                        }\n                      hotSlices {\n                       ${deets}\n                        }\n                    }\n                }\n            `\n            })\n        }).then(res => res.json()).then(res => {\n            //TODO Check for errors\n            //set the data to state\n            setHotSlices(res.data.StoreSettings.hotSlices);\n            setSlicemasters(res.data.StoreSettings.slicemaster);\n        }).catch(err => {\n            console.log(err);\n        })\n    }, []);\n    return {\n        hotSlices, slicemasters\n    }\n}","import React from 'react';\nimport LoadingGrid from '../components/LoadingGrid';\nimport ItemGrid from '../components/ItemGrid';\nimport { HomePageGrid } from '../styles/Grids';\nimport useLatestData from '../utils/useLatestData';\n\nfunction CurrentlySlicing({ slicemasters }){\n    return (\n        <div>\n            <h2 className=\"center\">\n                <span className=\"mark tilt\">Slicemasters On</span>\n            </h2>\n            <p>Standing by, ready to box you up!</p>\n            {!slicemasters && <LoadingGrid count={4} />}\n            {slicemasters && !slicemasters?.length && (<p>No One is Working Right Now!</p>)}\n            {slicemasters?.length && <ItemGrid items={slicemasters} />}\n        </div>\n    )\n}\nfunction HotSlices({ hotSlices }){\n    return (\n        <div>\n            <h2 className=\"center\">\n                <span className=\"mark tilt\">Hot Slices</span>\n            </h2>\n            <p>Available in our case right now</p>\n            {!hotSlices && <LoadingGrid count={4} />}\n            {hotSlices && !hotSlices?.length && (<p>Our Case Looks Empty!</p>)}\n            {hotSlices?.length && <ItemGrid items={hotSlices} />}\n        </div>\n    )\n}\n\nexport default function HomePage() {\n    const {slicemasters, hotSlices} = useLatestData();\n    return (\n       <div className=\"center\">\n           <h1>The Best Pizza Downtown</h1>\n           <p>Open 11am to 11pm Every Single Day</p>\n           <HomePageGrid> \n               <CurrentlySlicing slicemasters={slicemasters}/>\n               <HotSlices hotSlices={hotSlices} />\n           </HomePageGrid>\n       </div>\n    );\n}"],"sourceRoot":""}